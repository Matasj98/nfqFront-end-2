{"version":3,"sources":["serviceWorker.js","components/Card.js","config.js","components/Genres.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","toogleDescription","setState","isDescription","state","like","isLike","which","localStorage","setItem","index","this","getItem","title","backgroundImage","data","voteAverage","voteCount","description","className","style","onClick","React","Component","apiKey","hostUrl","endpoints","Genres","genre","id","handle","App","selectedGenre","genre_Id","list","genres","axios","get","then","results","map","key","name","filter","genre_ids","includes","card","original_title","path","backdrop_path","release_date","vote_average","vote_count","overview","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.54861971.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\n\nclass Card extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isDescription: false,\n            isLike: false,\n            index: this.props.index\n        }\n    }\n\n    toogleDescription = () => {\n        this.setState({\n            isDescription: !this.state.isDescription,\n        })\n    }\n\n    like = () =>{\n        this.setState({isLike: !this.state.isLike})\n        let which =this.state.isLike ? \"fa fa-heart\" : \"fa fa-heart\";\n        window.localStorage.setItem(this.state.index, which);\n    }\n\n    //uzmauntinam like jei buvo\n    componentDidMount(){\n        this.setState({isLike: window.localStorage.getItem(this.state.index)})\n    }\n\n    render() {\n        const {title, backgroundImage, data, voteAverage, voteCount, description} = this.props;\n\n        return (\n            <div className=\"card\">\n                <div\n                    className=\"card__image\"\n                    style={{\n                        backgroundImage: `url('${backgroundImage}')`\n                    }}\n                />\n            \n                <div className=\"card__title\">\n                    {title}\n                </div>\n            \n                <div className=\"card__like\" onClick={this.like}>\n                    <i className={this.state.isLike ? \"fa fa-heart\": \"fa fa-heart-o\"}/>\n                </div>\n            \n                <div className=\"card__subtitle\">\n                    <span>{data}</span>\n                    <span>{voteAverage} ({voteCount} votes)</span>\n                </div>\n                <div className=\"card-info\">\n                    <div className=\"card-info__header\">SUMMARY</div>\n                    <button className=\"card-info__hideButton\" onClick={this.toogleDescription}>Toogle Description</button>\n                    <div className=\"card-info__description\">\n                        {this.state.isDescription?description:''}\n                    </div>\n                </div>\n            </div>\n\n        )\n        \n    }\n}\n\nexport  default  Card;","const apiKey = '7bd61d5db2476d1307ff393ff142924b';\r\nexport const hostUrl = 'https://api.themoviedb.org/3';\r\nexport const imageUrl = 'https://image.tmdb.org/t/p/w1280';\r\n\r\nexport const endpoints = {\r\n  mostPopularMovies: () => `${hostUrl}/movie/popular?api_key=${apiKey}`,\r\n  genres: () => `${hostUrl}/genre/movie/list?api_key=${apiKey}`,\r\n  genreMovies: (id) => `${hostUrl}/genre/${id}/movies?api_key=${apiKey}`,\r\n};\r\n\r\nexport const getImageUrl = (path) => `${imageUrl}${path}`;\r\n","import React from 'react'\n\n// import './Genres.style.css';\n\nconst Genres = ({genre, id, handle}) =>{\n    return(\n        <div className=\"genre\">\n            <h6 onClick={()=> handle(id)}>{genre}</h6>\n        </div>\n    )\n}\n\nexport default Genres;","import React from 'react';\nimport Card from './Card';\nimport axios from 'axios';\nimport {endpoints, getImageUrl} from '../config';\nimport Genres from './Genres';\n\nclass  App extends React.Component{\n\n\n    constructor() {\n        super();\n\n        this.state = {\n            list: [],\n            genres: [],\n            genre_Id: null\n        };\n    }\n\n    componentDidMount() {\n        axios\n            .get(endpoints.mostPopularMovies())\n            .then((data) => {\n                this.setState({\n                    list: data.data.results,\n                });\n            });\n\n        axios\n            .get(endpoints.genres())\n            .then((data) => {\n                this.setState({\n                    genres: data.data.genres\n                });\n            });\n\n    }\n    //saugom koks zanro id\n    selectedGenre = (id) =>{\n        this.setState({genre_Id: id});\n    }\n\n\n    render() {\n\n        const {list, genres} = this.state;\n\n        return (\n            <div>\n\n                <div>\n                    {genres.map((genre, index) => <Genres key = {index} genre = {genre.name} id={genre.id} handle={this.selectedGenre}/>)}\n                </div>\n\n                {list.filter(data => {\n                    if(this.state.genre_Id === null){\n                        return data;\n                    }else{\n                        //tikrinam ar filmo ID array turi this.state zanro id, kuri pasiinkom is menu\n                        let n = data.genre_ids.includes(this.state.genre_Id);\n                        return n ? data : null;\n                    }\n                }).map((card) => (\n                    <Card\n                        key={card.id}\n                        title={card.original_title}\n                        backgroundImage={getImageUrl(card.backdrop_path)}\n                        data={card.release_date}\n                        voteAverage={card.vote_average}\n                        voteCount={card.vote_count}\n                        description={card.overview}\n                        index={card.id}\n                    />\n                ))}\n              {/* {console.log(this.state.genres)}\n              {console.log(this.state.list)} */}\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}